import os
import logging

import numpy as np
from sklearn.externals import joblib
from sklearn.svm import SVC
from sklearn.linear_model.stochastic_gradient import SGDClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.ensemble.weight_boosting import AdaBoostClassifier
from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier
from sklearn.naive_bayes import GaussianNB, BernoulliNB
from sklearn.neighbors import KNeighborsClassifier, RadiusNeighborsClassifier

from classifier import MultiClassifier, CATEGORY_BENIGN, CATEGORY_MALICIOUS

logger = logging.getLogger(__name__)

# TODO add to type_map and __init__, remove
TRUTHS = ['true', 't', '1']
SVM_CLASS_WEIGHTS = {
    CATEGORY_BENIGN   :os.environ.get('MML_SVM_BENIGN_WEIGHT', None),
    CATEGORY_MALICIOUS:os.environ.get('MML_SVM_MALICIOUS_WEIGHT', None),
}
SVM_CLASS_WEIGHTS = {k:v for k, v in SVM_CLASS_WEIGHTS.items() if v is not None}

class SkClassifier(MultiClassifier):
    type_map = dict(
        MultiClassifier.type_map,
        c=float,
        gamma=float,
        cache=int,
        n_estimators=int,
        n_neighbors=int,
        radius=float,
        # probability=str_to_bool, # TODO
        # class_weights # TODO
    )
    
    base_param_grid = {
        'svc__C':np.logspace(-2, 3, 5)
    }
    
    classifiers = {
        'svm'    :{
            'build'      :lambda self:SVC(kernel='linear', C=self.c, probability=self.probability, cache_size=self.cache,
                                          class_weight=SVM_CLASS_WEIGHTS if SVM_CLASS_WEIGHTS else None),
            'param_grid' :dict(base_param_grid),
            'test_params':{'probability':False},
            'roc_params' :{'probability':True},
        },
        'svm-rbf':{
            'build'      :lambda self:SVC(kernel='rbf', C=self.c, probability=self.probability, cache_size=self.cache,
                                          gamma=self.gamma,
                                          class_weight=SVM_CLASS_WEIGHTS if SVM_CLASS_WEIGHTS else None),
            'param_grid' :dict(base_param_grid, svc__gamma=np.logspace(-9, 3, 5)),
            'test_params':{'probability':False},
            'roc_params' :{'probability':True},
        },
        'mlp'    :{
            'build'     :lambda self:MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(5, 2),
                                                   random_state=42),
            'param_grid':dict(),
        },
        'knn'    :{
            'build'     :lambda self:KNeighborsClassifier(n_neighbors=self.n_neighbors, n_jobs=self.n_jobs),
            'param_grid':dict(),
        },
        'rnn'    :{
            'build'     :lambda self:RadiusNeighborsClassifier(radius=self.radius, n_jobs=self.n_jobs, outlier_label=0),
            'param_grid':dict(),
        },
        'ada'    :{
            'build'     :lambda self:AdaBoostClassifier(),
            'param_grid':dict(),
        },
        'ada-svm':{
            'build'     :lambda self:AdaBoostClassifier(
                base_estimator=SVC(probability=True, kernel='rbf', C=self.c, gamma=self.gamma, cache_size=self.cache)
            ),
            'param_grid':dict(),
        },
        'ada-sgd':{
            'build'     :lambda self:AdaBoostClassifier(
                base_estimator=SGDClassifier(loss='hinge'), algorithm='SAMME'
            ),
            'param_grid':dict(),
        },
        'rf'     :{
            'build'     :lambda self:RandomForestClassifier(n_estimators=self.n_estimators, n_jobs=self.n_jobs),
            'param_grid':dict(),
        },
        'et'     :{
            'build'     :lambda self:ExtraTreesClassifier(n_estimators=self.n_estimators, n_jobs=self.n_jobs),
            'param_grid':dict(),
        },
        'gnb'    :{
            'build'     :lambda self:GaussianNB(),
            'param_grid':dict(),
        },
        'bnb'    :{
            'build'     :lambda self:BernoulliNB(),
            'param_grid':dict(),
        },
    }
    
    def __init__(self, classifier_name='svm', c=1000, gamma=0.02, cache=2000, n_estimators=200, n_neighbors=16,
                 radius=1.0, probability=True, **kwargs):
        super().__init__(classifier_name, **kwargs)
        
        logger.info('Initializing Scikit-learn classifier {}'.format(classifier_name))
        self.c = c
        self.gamma = gamma
        self.cache = cache
        self.probability = probability
        self.n_estimators = n_estimators
        self.n_neighbors = n_neighbors
        self.radius = radius
    
    def load_model(self, model_dir):
        super().load_model(model_dir=model_dir)
        self.clf = joblib.load(os.path.join(model_dir, 'clf.pkl'))
    
    def save_model(self, output_dir):
        super().save_model(output_dir=output_dir)
        joblib.dump(self.clf, os.path.join(output_dir, 'clf.pkl'))
    
    def _build_classifier(self, *args, **kwargs):
        return self.classifier_dict['build'](self)
    
    def _get_param_grid(self):
        return self.classifier_dict['param_grid']
    
    def _get_test_params(self):
        return self.classifier_dict.get('test_params', {})
    
    def _get_cv_params(self):
        return {**self._get_test_params(), **self.classifier_dict.get('cv_params', {})}
    
    def _get_roc_params(self):
        return self.classifier_dict.get('roc_params', {})
