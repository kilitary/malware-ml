# TODO this is a mess. Either get rid of the report loader class or the helper functions.
# TODO we need to get rid of feature include and exclude files anyways, that should clean things up
import os
import re
import json
import logging

import get_features
from helpers import get_file_lines, CATEGORY_MALICIOUS, CATEGORY_BENIGN

logger = logging.getLogger(__name__)


def load_goodware_malware(goodware_dir, malware_dir, extract_features=False, max_filesize=None):
    goodware_files, malware_files = [[os.path.join(x, f) for f in os.listdir(x)] for x in (goodware_dir, malware_dir)]
    files = goodware_files + malware_files
    truths = [CATEGORY_BENIGN] * len(goodware_files) + [CATEGORY_MALICIOUS] * len(malware_files)
    reports = load_files(files, truths, extract_features, max_filesize)
    return reports


def load_files(files, truths=None, extract_features=False, max_filesize=None):
    logging.info('Loading reports')
    rl = ReportLoader(extract_features=extract_features, max_filesize=max_filesize)
    reports = rl.load_reports(files, truths=truths)
    logging.info('Done loading reports')

    return reports


class ReportLoader:
    def __init__(self, extract_features=True, max_filesize=None):
        self.extract_features = extract_features
        self.max_filesize = max_filesize

    def load_reports(self, files, truths=None, max_filesize=None):
        # TODO For now, just do it same as currently
        # Later, will have to implement loading from list and from dirs
        reports = []

        if truths and len(truths) != len(files):
            raise Exception('If truths is specified, it must be the same length as files!')

        if truths is None:
            truths = [None]*len(files)

        for file, truth in zip(files, truths):
            # Ignore large report files...
            if self.max_filesize and os.stat(file).st_size > max_filesize:
                logging.warning('Skipping {}'.format(file))
                continue

            report = Report(truth=truth)

            try:
                if self.extract_features:
                    report.load_report(file, file)
                else:
                    report.load_features(file, file)
            except ValueError:
                continue

            reports.append(report)

        return reports


class Report:
    def __init__(self, truth=None, category=None):
        self.truth = truth
        self.category = category

        self.name = ""
        self.hash = None
        self.all_features = None  # dict
        self.features = None  # dict
        self.total = None
        self.positives = None
        self.scans = None

    @staticmethod
    def get_hash(name):
        return name.split('/')[-1].replace('.features.json', '').strip()

    def _load(self, json_file):
        """Load JSON formatted malware features. It can handle both a path to JSON file and a dictionary object."""
        if isinstance(json_file, str):
            self.json_path = json_file
            with open(json_file, "r") as malware_report:
                try:
                    self.report = json.load(malware_report)
                except ValueError as error:
                    logging.error("Could not load file; {} is not a valid JSON file.".format(malware_report))
                    logging.error("Exception: %s" % str(error))
                    raise

        elif isinstance(json_file, dict):
            self.report = json_file
        else:
            # Unknown binary format
            logging.error("Could not load the data *{}* is of unknown type: {}.".format(json, type(json)))
            return -1

    def load_features(self, json_file, file_name="unknown"):
        self._load(json_file)
        self.name = file_name
        self.hash = self.get_hash(self.name)
        self.all_features = self.report
        self.features = self.filter_features()

    def load_report(self, json_file, file_name="unknown"):
        """Load JSON formatted malware report. It can handle both a path to JSON file and a dictionary object."""
        self._load(json_file)
        self.name = file_name
        self.hash = self.get_hash(self.name)
        self.all_features = get_features.get_features_from_dict(self.report)
        self.features = self.filter_features()

        del self.report  # To save memory, reports are huge and we don't use them anymore

    def filter_features(self):
        return self.all_features
