#!/usr/bin/env python3
import importlib
import os
import sys
import logging
import argparse
import numpy as np
from collections import defaultdict

# Based on http://scikit-learn.org/stable/auto_examples/model_selection/plot_roc_crossval.html#sphx-glr-auto-examples-model-selection-plot-roc-crossval-py
import matplotlib.pyplot as plt  # Imported locally to reduce dependencies
from sklearn.metrics import auc, roc_curve

def plot_roc(g_pred,g_proba,m_pred,m_proba,list_points):
    color = 'cyan'
    line_weight = 2

    probabilities = np.concatenate([np.array(g_proba),np.array(m_proba)])
    truths = np.concatenate([np.zeros((len(g_proba))),np.ones((len(m_proba)))])
    
    # Compute ROC curve and area the curve
    fpr, tpr, thresholds = roc_curve(truths[:], probabilities[:, 1])
    roc_auc = auc(fpr, tpr)
    plt.plot(fpr, tpr, lw=line_weight, color=color,
             label='ROC (area = %0.2f)' % (roc_auc))
    
    plt.plot([0, 1], [0, 1], linestyle='--', lw=line_weight, color='k',
             label='Luck')
        
    plt.xlim([-0.05, 1.05])
    plt.ylim([-0.05, 1.05])
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('Receiver operating characteristic example')
    plt.legend(loc="lower right")
    plt.show()

    with open('points.txt','w') as f:
        for x,y in zip(fpr,tpr):
            f.write('{} {}\n'.format(x,y))

# ----- Setup Functions -----
def build_parser():
    """
    Build the argparse parser.
    :return: argparse.ArgumentParser instance
    """
    parser = argparse.ArgumentParser(description='Plot ROC curve for goodware,malware predictions')
    parser.add_argument('-l', '--list-points', action='store_true', help='Outputs the datapoints from the ROC plot')

    # Takes goodware malware
    parser = argparse.ArgumentParser(add_help=True)
    parser.add_argument('goodware', help='File with predictions from predict on goodware')
    parser.add_argument('malware', help='File with predictions from predict on malware')

    return parser

def load_predictions(file_name):
    predictions = []
    probabilities = []
    with open(file_name, "r") as pred:
        for line in pred:
            line = line.rstrip()
            predictions.append(int(line[1]))
            proba_pair = []
            probas = line[line.index('[')+1:line.index(']')]
            proba_pair.append(float(probas.split(',')[0].lstrip()))
            proba_pair.append(float(probas.split(',')[1].lstrip()))
            probabilities.append(proba_pair)

    return predictions, probabilities
    
def main(argv):
    # Command line args
    cargs = build_parser().parse_args(argv[1:])
    cargs = vars(cargs)  # Convert to dict

    goodware_pred, goodware_proba = load_predictions(cargs.pop('goodware'))
    malware_pred, malware_proba = load_predictions(cargs.pop('malware'))
    list_points = cargs.pop('list-points',False)

    plot_roc(goodware_pred,goodware_proba,malware_pred,malware_proba,list_points)
    
if __name__ == '__main__':
    main(sys.argv)
