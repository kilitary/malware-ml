import json
import os
import sys
import pandas as pd
from sklearn.cluster import DBSCAN

import numpy as np

import matplotlib.pyplot as plt

from sklearn.cluster import DBSCAN
from sklearn import metrics
from sklearn.datasets.samples_generator import make_blobs
from sklearn.preprocessing import StandardScaler

# def load_json(json_file, name="unknown"):
#     """Load JSON formatted malware report. It can handle both a path to
#     JSON file and a dictionary object."""
#     if isinstance(json_file, str):
#         json_path = json_file
#         with open(json_file, "r") as malware_report:
#             try:
#                 report = json.load(malware_report)
#             except ValueError, error:
#                 print >> sys.stderr, "Could not load file;", \
#                     malware_report, "is not a valid JSON file."
#                 print >> sys.stderr, "Exception: %s" % str(error)
#                 sys.exit(1)
#     elif isinstance(json_file, dict):
#         report = json_file
#     else:
#         # Unknown binary format
#         print >> sys.stderr, "Could not load the data *", json, "* is of " \
#             "unknown type: ", type(json), "."

#     filename = name

#     total = 0
#     positives = 0
#     scans = 0
#     # Get total and positives
#     if report.get("virustotal"):
#         total = report.get("virustotal").get("total")
#         positives = report.get("virustotal").get("positives")
#         # Pull all VT normalised results
#         scans = report.get("virustotal").get("scans")
#     score = report.get("info").get("score")
#     category = report.get("info").get("category")
#     sha1 = report.get("target").get("file").get("sha1")

#     print "Total: " + str(total)
#     print "Positives: " + str(positives)
#     print "Scans: " + str(scans)
#     print "Score: " + str(score)
#     print "Category: " + str(category)
#     print "SHA1: " + str(sha1)

# #load_json("/home/aaronkramer/cuckoo/cuckoo_reports/report_17.json")
# features = {}

# directory = sys.argv[1]
# for file in os.listdir(directory):
#     print "File: " + str(file)
#     load_json(os.path.join(directory, file))
#     print

class ML(object):
    def build_feature_matrix(self, features):
        processed_features = features

        features_pd = pd.DataFrame(processed_features).T
        features_pd.fillna(0, inplace=True)
        return features_pd

    def plot_results(self, data, core_samples_mask, labels, n_clusters_):
        # From: http://scikit-learn.org/stable/auto_examples/cluster/plot_dbscan.html#sphx-glr-auto-examples-cluster-plot-dbscan-py

        # Black removed and is used for noise instead.
        X = data
        unique_labels = set(labels)
        print "Unique Labels: " + str(unique_labels)
        colors = plt.cm.Spectral(np.linspace(0, 1, len(unique_labels)))
        for k, col in zip(unique_labels, colors):
            print "K, col: " + str(k) + str(col)
            if k == -1:
                # Black used for noise.
                col = 'k'

            class_member_mask = (labels == k)

            xy = X[class_member_mask & core_samples_mask]
            plt.plot(xy[:, 0], xy[:, 1], 'o', markerfacecolor=col,
                     markeredgecolor='k', markersize=14)
            print xy

            xy = X[class_member_mask & ~core_samples_mask]
            plt.plot(xy[:, 0], xy[:, 1], 'o', markerfacecolor=col,
                     markeredgecolor='k', markersize=6)

        plt.title('Estimated number of clusters: %d' % n_clusters_)
        plt.show()

    def cluster_dbscan(self, reports=None, eps=20.0, min_samples=5, dry=False):
        """Do *dbscan* clustering and return """

        # Assign true labels: declare malware if >2 postives from VirusTotal scans
        labels_true = [(1 if (r.positives >= 3) else 0) for r in reports]
        print labels_true

        report_features = {(r.name):(r.features) for r in reports}
        # print report_features
        features_pd = self.build_feature_matrix(report_features)
        features = features_pd

        stscaler = StandardScaler().fit(features)
        features = stscaler.transform(features)
        # print features

        dbscan = DBSCAN(eps=0.5, min_samples=min_samples).fit(features)

        core_samples_mask = np.zeros_like(dbscan.labels_, dtype=bool)
        core_samples_mask[dbscan.core_sample_indices_] = True
        labels = dbscan.labels_

        # Number of clusters in labels, ignoring noise if present.
        n_clusters_ = len(set(labels)) - (1 if -1 in labels else 0)

        print('Estimated number of clusters: %d' % n_clusters_)
        print("Homogeneity: %0.3f" % metrics.homogeneity_score(labels_true, labels))
        print("Completeness: %0.3f" % metrics.completeness_score(labels_true, labels))
        print("V-measure: %0.3f" % metrics.v_measure_score(labels_true, labels))
        print("Adjusted Rand Index: %0.3f"
            % metrics.adjusted_rand_score(labels_true, labels))
        print("Adjusted Mutual Information: %0.3f"
            % metrics.adjusted_mutual_info_score(labels_true, labels))
        print("Silhouette Coefficient: %0.3f"
            % metrics.silhouette_score(features, labels))

        #////////////////////////////////////////////////////////////
        self.plot_results(features, core_samples_mask, labels, n_clusters_)
        #////////////////////////////////////////////////////////////

        return {
            "eps":eps,
            "min_samples":min_samples,
            "clustering":pd.DataFrame(dbscan.labels_, index=features.index,
                                    columns=["label"])
        }
    

class Report(object):
    def __init__(self):
        self.name = ""
        self.features = {}
        self.total = None
        self.positives = None
        self.scans = None

    def load_report(self, json_file, file_name="unknown"):
        """Load JSON formatted malware report. It can handle both a path to
        JSON file and a dictionary object."""
        if isinstance(json_file, str):
            self.json_path = json_file
            with open(json_file, "r") as malware_report:
                try:
                    self.report = json.load(malware_report)
                except ValueError, error:
                    print >> sys.stderr, "Could not load file;", \
                        malware_report, "is not a valid JSON file."
                    print >> sys.stderr, "Exception: %s" % str(error)
                    sys.exit(1)
        elif isinstance(json_file, dict):
            self.report = json_file
        else:
            # Unknown binary format
            print >> sys.stderr, "Could not load the data *", json, "* is of " \
                "unknown type: ", type(json), "."

        # Could be extracted as features elsewhere...
        self.name = file_name
        # Get total and positives
        self.total = self.report.get("virustotal", {}).get("total")
        self.positives = self.report.get("virustotal", {}).get("positives")
        # Pull all VT normalised results
        self.scans = self.report.get("virustotal", {}).get("scans")

    def get_features(self):
        self.features["size"] = self.report.get("target", {}).get("file", {}).get("size")
        #self.features["timestamp"] = self.report.get("static", {}).get("pe_timestamp")
        #self.features["magic_byte"] = self.report.get("target", {}).get("file", {}).get("type")
        self.features["cuckoo_score"] = self.report.get("info", {}).get("score")
        #self.features["signed"] = bool(self.report.get("static", {}).get("signature", []))
        self.features["sig_count"] = len(self.report.get("signatures", []))

        self.features["static_imports"] = self.report.get("static", {}).get("imported_dll_count", None)




#-------------------------------------------------------------------------------------
reports = []
report_features = {}
directory = sys.argv[1]
for file in os.listdir(directory):
    new_report = Report()
    
    
    new_report.load_report(os.path.join(directory, file), file)
    new_report.get_features()
    report_features[file] = new_report.features
    reports.append(new_report)

    print "File: " + str(file) + " - " + str(new_report.positives) + "/" + str(new_report.total)
    print new_report.features
    print

print "Reports"
print [r.name for r in reports]
ml = ML()
# features_pd = ml.build_feature_matrix(report_features)
# print features_pd
db = ml.cluster_dbscan(reports)

print db
print n_clusters_