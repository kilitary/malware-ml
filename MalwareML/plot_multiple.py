#!/usr/bin/env python3
import os
import sys
import json
import argparse
import numpy as np
from collections import defaultdict, Iterable

from sklearn.metrics import auc, roc_curve, f1_score, log_loss
import matplotlib.pyplot as plt  # Imported locally to reduce dependencies

CATEGORY_BENIGN = 0
CATEGORY_MALICIOUS = 1


# Based on http://scikit-learn.org/stable/auto_examples/model_selection/plot_roc_crossval.html#sphx-glr-auto-examples-model-selection-plot-roc-crossval-py
def plot_roc(config, output_filename=None):
    for pc in config['plots']:
        probabilities, truths = zip(*[(v['prediction'], v['truth']) for v in pc['results'].values()])
        probabilities = np.array(probabilities)
        truths = np.array(truths)

        # Compute ROC curve and AUC
        fpr, tpr, thresholds = roc_curve(truths[:], probabilities[:, 1])

        plt.plot(fpr, tpr, lw=1, color=pc['color'], ls=pc['ls'],
                label='{}'.format(pc['title']))
    
    plt.xlim(config['xlim'])
    plt.ylim(config['ylim'])
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title(config['title'])
    plt.legend(loc="lower right")
    if output_filename is not None:
        plt.savefig(output_filename)
    else:
        plt.show()


# ----- Setup Functions -----
def build_parser():
    """
    Build the argparse parser.
    :return: argparse.ArgumentParser instance
    """
    parser = argparse.ArgumentParser(description='Get stats and plot ROC curve from results.json and truths')
    parser = argparse.ArgumentParser(add_help=True)
    parser.add_argument('--save', action='store_true', help='Save plot to file based on config file name')
    parser.add_argument('config-file', help="Configuration file with list of result files and settings to plot")
    parser.add_argument('truths-file', help='File with truths for hashes. Each line should be "<hash> <0|1>"')

    return parser


def main(argv):
    # Command line args
    cargs = build_parser().parse_args(argv[1:])
    cargs = vars(cargs)  # Convert to dict
    print(cargs)

    with open(cargs['config-file']) as f:
        config = json.load(f)

    with open(cargs.pop('truths-file')) as f:
        truths = {l.split()[0].strip(): int(l.split()[1].strip()) for l in f}

    for plot_config in config['plots']:
        with open(plot_config['file']) as f:
            plot_config['results'] = json.load(f)

        for k, v in plot_config['results'].items():
            v['truth'] = truths[k]

    if cargs.get('save', False):
        output_filename = os.path.splitext(cargs['config-file'])[0] + '.png'
        plot_roc(config, output_filename)
    else:
        plot_roc(config)


if __name__ == '__main__':
    main(sys.argv)
