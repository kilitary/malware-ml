#!/usr/bin/env python3
import os
import sys
import glob
import json
import random
from collections import defaultdict


def write_dict(d, path, keys_only=False):
    with open(path, 'w') as f:
        for k in sorted(d.keys()):
            if keys_only:
                f.write('{}\n'.format(k))
            else:
                f.write('{}\n{}\n'.format(k, d[k]))


if __name__ == '__main__':
    input_dir = 'features/'
    output_dir = './'
    if len(sys.argv) > 1:
        input_dir = sys.argv[1]
    if len(sys.argv) > 2:
        output_dir = sys.argv[2]

    input_basename = os.path.basename(os.path.normpath(input_dir))
    input_basename = 'features' if input_basename in ('..', '.') else input_basename
    sums_output_path = os.path.join(output_dir, '{}_sums.txt'.format(input_basename))
    counts_output_path = os.path.join(output_dir, '{}_counts.txt'.format(input_basename))
    features_output_path = os.path.join(output_dir, '{}_features.txt'.format(input_basename))

    if not os.path.exists(input_dir):
        raise IOError('Input dir {} does not exist'.format(input_dir))
    for path in (sums_output_path, counts_output_path):
        if os.path.exists(path):
            raise IOError('Path {} already exists'.format(path))

    feature_sums = defaultdict(int)
    feature_counts = defaultdict(int)
    for filename in glob.glob(os.path.join(input_dir, '*')):
        with open(filename) as f:
            try:
                j = json.load(f)
            except:
                print('Error loading {}'.format(filename))
                raise
        for k, v in j.items():
            feature_sums[k] += v if v is not None else 0
            feature_counts[k] += 1

    write_dict(feature_sums, sums_output_path)
    write_dict(feature_counts, counts_output_path)
    write_dict(feature_counts, features_output_path, keys_only=True)
