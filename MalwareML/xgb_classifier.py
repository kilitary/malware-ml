import os
import logging

import xgboost as xgb

from classifier import Classifier

logger = logging.getLogger(__name__)


class XgbClassifier(Classifier):
    def _build_classifier(self, *args, **kwargs):
        return xgb

    def make_classifier(self):
        pass

    def test(self, cv=0, n_jobs=-1, results=False, use_best_params=False):
        report_truths = [r.truth for r in self.reports]
        x_train, x_test, y_train, y_test = train_test_split(self.feat_matrix, report_truths, test_size=0.25)

        d_train = xgb.DMatrix(x_train, label=y_train)
        d_test = xgb.DMatrix(x_test, label=y_test)

        params = {'max_depth': 20, 'eta': 1, 'silent': 0, 'objective': 'binary:logistic', 'nthread': 4, 'eval_metric': 'auc'}
        num_round = 30
        #evallist = [(d_test, 'eval'), (d_train, 'train')]

        print('XGBoost!')
        bst = xgb.train(params, d_train, num_round)#, evallist)
        print('Done boosting')
        predictions = bst.predict(d_test)
        predictions = [0 if p<0.5 else 1 for p in predictions]
        print('Done prediction')
        self.accuracy(predictions, y_test)

    def train(self, use_best_params=False):
        """
        Train classifier with reports
        """
        report_truths = [r.truth for r in self.reports]
        d_train = xgb.DMatrix(self.feat_matrix, label=report_truths)

        logging.info('Training classifier')
        if use_best_params:
            self.clf.set_params(**self.get_best_ml_params())

        params = {'max_depth': 20, 'eta': 1, 'silent': 0, 'objective': 'binary:logistic', 'nthread': 4, 'eval_metric': 'auc'}
        num_round = 30
        self.clf = xgb.train(params, d_train, num_round)

    def get_predictions(self, reports):
        self.reports += reports  # Keep track of reports to get statistics later
        feature_matrix = self.get_feature_matrix(reports)
        d_predict = xgb.DMatrix(feature_matrix)
        logging.info('Predicting classes using existing classifier')
        predictions = self.clf.predict(d_predict)
        predictions = [0 if p<0.5 else 1 for p in predictions]
        return predictions

    def save_clf(self, output_dir):
        self.clf.save_model(os.path.join(output_dir, XGB_MODEL_NAME))

    def load_clf(self, model_dir):
        """ Separated since its different for clf """
        self.clf = xgb.Booster({'nthread': 4})
        self.clf.load_model(os.path.join(model_dir, XGB_MODEL_NAME))


XGB_MODEL_NAME = 'xgb.model'
